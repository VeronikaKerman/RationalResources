// Change all stock tanks to hold fuel, without CryoTanks.

@PART[airplaneTail,airplaneTailB]:NEEDS[B9PartSwitch,RationalResources,!ConfigurableContainers/Parts,!ModularFuelTanks,!RealFuels]:FOR[RationalResourcesSquad]
{
	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = RRStockSwitch
		switcherDescription = RR Fuel
		switcherDescriptionPlural = RR Fuel Options
		switchInFlight = True
		baseVolume = 200
	}
}

@PART:HAS[#manufacturer[Jebediah*],!MODULE[ModuleB9PartSwitch],@RESOURCE[LiquidFuel]]:NEEDS[B9PartSwitch,RationalResources,!ConfigurableContainers/Parts,!ModularFuelTanks,!RealFuels]:FOR[RationalResourcesSquad]
{
	refVolume = #$RESOURCE[LiquidFuel]/maxAmount$
	@refVolume += #$RESOURCE[Oxidizer]/maxAmount$
	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = RRStockSwitch
		switcherDescription = RR Fuel
		switcherDescriptionPlural = RR Fuel Options
		switchInFlight = True
		baseVolume = #$../refVolume$
	}
}
@PART:HAS[#manufacturer[Probodobodyne?Inc],!MODULE[ModuleB9PartSwitch],@RESOURCE[LiquidFuel]]:NEEDS[B9PartSwitch,RationalResources,!ConfigurableContainers/Parts,!ModularFuelTanks,!RealFuels]:FOR[RationalResourcesSquad]
{
	refVolume = #$RESOURCE[LiquidFuel]/maxAmount$
	@refVolume += #$RESOURCE[Oxidizer]/maxAmount$
	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = RRStockSwitch
		switcherDescription = RR Fuel
		switcherDescriptionPlural = RR Fuel Options
		switchInFlight = True
		baseVolume = #$../refVolume$
	}
}
@PART:HAS[#manufacturer[Rockomax?Conglomerate],!MODULE[ModuleB9PartSwitch],@RESOURCE[LiquidFuel]]:NEEDS[B9PartSwitch,RationalResources,!ConfigurableContainers/Parts,!ModularFuelTanks,!RealFuels]:FOR[RationalResourcesSquad]
{
	refVolume = #$RESOURCE[LiquidFuel]/maxAmount$
	@refVolume += #$RESOURCE[Oxidizer]/maxAmount$
	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = RRStockSwitch
		switcherDescription = RR Fuel
		switcherDescriptionPlural = RR Fuel Options
		switchInFlight = True
		baseVolume = #$../refVolume$
	}
}
@PART:HAS[#manufacturer[Kerbodyne],!MODULE[ModuleB9PartSwitch],@RESOURCE[LiquidFuel]]:NEEDS[B9PartSwitch,RationalResources,!ConfigurableContainers/Parts,!ModularFuelTanks,!RealFuels]:FOR[RationalResourcesSquad]
{
	refVolume = #$RESOURCE[LiquidFuel]/maxAmount$
	@refVolume += #$RESOURCE[Oxidizer]/maxAmount$
	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = RRStockSwitch
		switcherDescription = RR Fuel
		switcherDescriptionPlural = RR Fuel Options
		switchInFlight = True
		baseVolume = #$../refVolume$
	}
}
@PART:HAS[#manufacturer[C7?Aerospace?Division],!MODULE[ModuleB9PartSwitch],@RESOURCE[Oxidizer]]:NEEDS[B9PartSwitch,RationalResources,!ConfigurableContainers/Parts,!ModularFuelTanks,!RealFuels]:FOR[RationalResourcesSquad]
{
	refVolume = #$RESOURCE[LiquidFuel]/maxAmount$
	@refVolume += #$RESOURCE[Oxidizer]/maxAmount$
	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = RRStockSwitch
		switcherDescription = RR Fuel
		switcherDescriptionPlural = RR Fuel Options
		switchInFlight = True
		baseVolume = #$../refVolume$
	}
}

// Parts that hold MonoPropellant only. CryoTanks ignores these.
@PART:HAS[#manufacturer[C7?Aerospace?Division],!MODULE[ModuleB9PartSwitch],@RESOURCE[MonoPropellant]]:NEEDS[B9PartSwitch,RationalResources,!ConfigurableContainers/Parts,!ModularFuelTanks,!RealFuels]:FOR[RationalResourcesSquad]
{
	refVolume = #$RESOURCE[MonoPropellant]/maxAmount$
	!RESOURCE[MonoPropellant] {}
	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = RRStockSwitch
		switcherDescription = RR Fuel
		switcherDescriptionPlural = RR Fuel Options
		switchInFlight = True
		baseVolume = #$../refVolume$
	}
}
@PART:HAS[#manufacturer[Jebediah*],!MODULE[ModuleB9PartSwitch],@RESOURCE[MonoPropellant]]:NEEDS[B9PartSwitch,RationalResources,!ConfigurableContainers/Parts,!ModularFuelTanks,!RealFuels]:FOR[RationalResourcesSquad]
{
	refVolume = #$RESOURCE[MonoPropellant]/maxAmount$
	!RESOURCE[MonoPropellant] {}
	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = RRStockSwitch
		switcherDescription = RR Fuel
		switcherDescriptionPlural = RR Fuel Options
		switchInFlight = True
		baseVolume = #$../refVolume$
	}
}
@PART:HAS[#manufacturer[Stratus?Corporation],!MODULE[ModuleB9PartSwitch],@RESOURCE[MonoPropellant]]:NEEDS[B9PartSwitch,RationalResources,!ConfigurableContainers/Parts,!ModularFuelTanks,!RealFuels]:FOR[RationalResourcesSquad]
{
	refVolume = #$RESOURCE[MonoPropellant]/maxAmount$
	!RESOURCE[MonoPropellant] {}
	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = RRStockSwitch
		switcherDescription = RR Fuel
		switcherDescriptionPlural = RR Fuel Options
		switchInFlight = True
		baseVolume = #$../refVolume$
	}
}
@PART:HAS[#manufacturer[Kerbodyne],!MODULE[ModuleB9PartSwitch],@RESOURCE[MonoPropellant]]:NEEDS[B9PartSwitch,RationalResources,!ConfigurableContainers/Parts,!ModularFuelTanks,!RealFuels]:FOR[RationalResourcesSquad]
{
	refVolume = #$RESOURCE[MonoPropellant]/maxAmount$
	!RESOURCE[MonoPropellant] {}
	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = RRStockSwitch
		switcherDescription = RR Fuel
		switcherDescriptionPlural = RR Fuel Options
		switchInFlight = True
		baseVolume = #$../refVolume$
	}
}

// Parts that hold LiquidFuel only. CryoTanks ignores these.

@PART:HAS[#manufacturer[C7?Aerospace?Division],!MODULE[ModuleB9PartSwitch],@RESOURCE[LiquidFuel],!RESOURCE[Oxidizer]]:NEEDS[B9PartSwitch,RationalResources,!ConfigurableContainers/Parts,!ModularFuelTanks,!RealFuels]:FOR[RationalResourcesSquad]
{
	refVolume = #$RESOURCE[LiquidFuel]/maxAmount$
	!RESOURCE[LiquidFuel] {}
	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = RRStockSwitch
		switcherDescription = RR Fuel
		switcherDescriptionPlural = RR Fuel Options
		switchInFlight = True
		baseVolume = #$../refVolume$
	}
}
@PART:HAS[#manufacturer[WinterOwl*],!MODULE[ModuleB9PartSwitch],@RESOURCE[LiquidFuel],!RESOURCE[Oxidizer]]:NEEDS[B9PartSwitch,RationalResources,!ConfigurableContainers/Parts,!ModularFuelTanks,!RealFuels]:FOR[RationalResourcesSquad]
{
	refVolume = #$RESOURCE[LiquidFuel]/maxAmount$
	!RESOURCE[LiquidFuel] {}
	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = RRStockSwitch
		switcherDescription = RR Fuel
		switcherDescriptionPlural = RR Fuel Options
		switchInFlight = True
		baseVolume = #$../refVolume$
	}
}


// Change module ID if part is tank + engine

@PART:HAS[@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RRStockSwitch]],@MODULE[ModuleEnginesFX]:HAS[@PROPELLANT[LiquidFuel]]]:NEEDS[B9PartSwitch,RationalResources,!ConfigurableContainers/Parts,!ModularFuelTanks,!RealFuels]:FOR[RationalResourcesSquad]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RRStockSwitch]]
	{
		@moduleID = RRLFBSwitch
	}
}


// Add primary tank types to stock parts

@PART:HAS[@MODULE[ModuleB9PartSwitch]]:NEEDS[B9PartSwitch,RationalResources,!ConfigurableContainers/Parts,!ModularFuelTanks,!RealFuels]:FOR[RationalResourcesSquad]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RRStockSwitch]]
	{
		SUBTYPE
		{
			name = LFO
			tankType = LFO
			title = LF + Ox
		}
		SUBTYPE
		{
			name = LF
			tankType = LiquidFuel
			title = LiquidFuel
		}
		SUBTYPE
		{
			name = OX
			tankType = OX
			title = Oxidizer
		}
		SUBTYPE
		{
			name = MO
			tankType = MonoPropellant
			title = MonoPropellant
		}
		SUBTYPE
		{
			name = Structural
			title = Structural
		}
	}
}

// Catch CryoTanks if installed and have it apply to these parts

@PART[airplaneTail,airplaneTailB]:NEEDS[B9PartSwitch,RationalResources,CryoTanks]:FOR[RationalResourcesSquad]
{
	RESOURCE
	{
		name = LiquidFuel
		amount = 200
		maxAmount = 200
	}
}

// Volume fix for Oscar B
@PART[miniFuelTank]:FOR[RationalResourcesSquad]
{
	@refVolume = 18
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RRStockSwitch]]
	{
		@baseVolume = #$../refVolume$
	}
}

// LFBs

@PART:HAS[@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RRLFBSwitch]]]:NEEDS[B9PartSwitch,RationalResources,!ConfigurableContainers/Parts,!ModularFuelTanks,!RealFuels]:FOR[RationalResourcesSquad]
{
	@description ^= :$: <br><#4FBBFF>Engine can accept different fuels.</color>
	
	%skinMaxTemp = #$maxTemp$
	
	lossMass = #$mass$
	@lossMass *= -0.2
	lossCost = #$cost$
	@lossCost *= -0.2 // not used. It seems to crash B9PartSwitch
	cryoMaxTemp = #$maxTemp$
	@cryoMaxTemp *= 0.8
	
	thrustLFO = #$MODULE[ModuleEnginesFX]/maxThrust$
	IspVacLFO = #$MODULE[ModuleEnginesFX]/atmosphereCurve/key,0[1, ]$ // get vac Isp number
	IspASLLFO = #$MODULE[ModuleEnginesFX]/atmosphereCurve/key,1[1, ]$ // get ASL Isp number
	
	thrustLH2O = #$thrustLFO$
	IspVacLH2O = #$IspVacLFO$
	IspASLLH2O = #$IspASLLFO$
	@thrustLH2O *= 0.8
	@IspVacLH2O *= 1.5
	@IspASLLH2O *= 1.5
	
	thrustLCO = #$thrustLFO$
	IspVacLCO = #$IspVacLFO$
	IspASLLCO = #$IspASLLFO$
	@thrustLCO *= 1
	@IspVacLCO *= 0.9
	@IspASLLCO *= 0.9
	
	thrustLCH4O = #$thrustLFO$
	IspVacLCH4O = #$IspVacLFO$
	IspASLLCH4O = #$IspASLLFO$
	@thrustLCH4O *= 1
	@IspVacLCH4O *= 1.2
	@IspASLLCH4O *= 1.2
	
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RRLFBSwitch]]
	{
		SUBTYPE
		{
			name = LFO
			tankType = LFO
			title = Kerolox
			descriptionDetail = #<b>Max Thrust:</b> $/thrustLFO$ kN <br><b>Isp:</b> $/IspASLLFO$ / $/IspVacLFO$s <br><b>Max Temp:</b> $/maxTemp$ / $/maxTemp$K
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleEnginesFX
				}
				DATA
				{
					maxThrust = #$/thrustLFO$
					PROPELLANT
					{
						name = LiquidFuel
						ratio = 0.9
					}
					PROPELLANT
					{
						name = Oxidizer
						ratio = 1.1
					}
					atmosphereCurve
					{
						key = #0 $/IspVacLFO$
						key = #1 $/IspASLLFO$
						key = #$/MODULE[ModuleEnginesFX]/atmosphereCurve/key,2$
					}
				}
			}
		}
		SUBTYPE:NEEDS[CommunityResourcePack,!ClassicStock]
		{
			name = HLOX
			tankType = RR_CryoHLOX
			title = Hydrolox
			addedMass = #$/lossMass$
			addedCost = #$/lossCost$
			descriptionDetail = #<b>Max Thrust:</b> <color="yellow">$/thrustLH2O$</color> kN <br><b>Isp:</b> <color="yellow">$/IspASLLH2O$</color> / <color="yellow">$/IspVacLH2O$</color>s <br><b>Max Temp:</b> <color="yellow">$/cryoMaxTemp$</color> / $/maxTemp$K
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleEnginesFX
				}
				DATA
				{
					maxThrust = #$/thrustLH2O$
					PROPELLANT
					{
						name = LqdHydrogen
						ratio = 15
					}
					PROPELLANT
					{
						name = Oxidizer
						ratio = 1
					}
					atmosphereCurve
					{
						key = #0 $/IspVacLH2O$
						key = #1 $/IspASLLH2O$
						key = #$/MODULE[ModuleEnginesFX]/atmosphereCurve/key,2$
					}
				}
			}
		}
		SUBTYPE:NEEDS[CommunityResourcePack,!ClassicStock]
		{
			name = MLOX
			tankType = RR_CryoMLOX
			title = Methalox
			addedMass = #$/lossMass$
			addedCost = #$/lossCost$
			descriptionDetail = #<b>Max Thrust:</b> $/thrustLCH4O$ kN <br><b>Isp:</b> <color="yellow">$/IspASLLCH4O$</color> / <color="yellow">$/IspVacLCH4O$</color>s <br><b>Max Temp:</b> <color="yellow">$/cryoMaxTemp$</color> / $/maxTemp$K
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleEnginesFX
				}
				DATA
				{
					maxThrust = #$/thrustLCH4O$
					PROPELLANT
					{
						name = LqdMethane
						ratio = 3
					}
					PROPELLANT
					{
						name = Oxidizer
						ratio = 1
					}
					atmosphereCurve
					{
						key = #0 $/IspVacLCH4O$
						key = #1 $/IspASLLCH4O$
						key = #$/MODULE[ModuleEnginesFX]/atmosphereCurve/key,2$
					}
				}
			}
		}
		SUBTYPE:NEEDS[ClassicStock]
		{
			name = HLOX
			tankType = RR_PLOX
			title = PropLox
			addedMass = #$/lossMass$
			addedCost = #$/lossCost$
			descriptionDetail = #<b>Max Thrust:</b> <color="yellow">$/thrustLH2O$</color> kN <br><b>Isp:</b> <color="yellow">$/IspASLLH2O$</color> / <color="yellow">$/IspVacLH2O$</color>s <br><b>Max Temp:</b> <color="yellow">$/cryoMaxTemp$</color> / $/maxTemp$K
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleEnginesFX
				}
				DATA
				{
					maxThrust = #$/thrustLH2O$
					PROPELLANT
					{
						name = Propellium
						ratio = 3
					}
					PROPELLANT
					{
						name = Oxidizer
						ratio = 1
					}
					atmosphereCurve
					{
						key = #0 $/IspVacLH2O$
						key = #1 $/IspASLLH2O$
						key = #$/MODULE[ModuleEnginesFX]/atmosphereCurve/key,2$
					}
				}
			}
		}
		SUBTYPE:NEEDS[ClassicStock]
		{
			name = MLOX
			tankType = RR_RLOX
			title = Raptalox
			addedMass = #$/lossMass$
			addedCost = #$/lossCost$
			descriptionDetail = #<b>Max Thrust:</b> $/thrustLCH4O$ kN <br><b>Isp:</b> <color="yellow">$/IspASLLCH4O$</color> / <color="yellow">$/IspVacLCH4O$</color>s <br><b>Max Temp:</b> <color="yellow">$/cryoMaxTemp$</color> / $/maxTemp$K
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleEnginesFX
				}
				DATA
				{
					maxThrust = #$/thrustLCH4O$
					PROPELLANT
					{
						name = Raptium
						ratio = 3
					}
					PROPELLANT
					{
						name = Oxidizer
						ratio = 1
					}
					atmosphereCurve
					{
						key = #0 $/IspVacLCH4O$
						key = #1 $/IspASLLCH4O$
						key = #$/MODULE[ModuleEnginesFX]/atmosphereCurve/key,2$
					}
				}
			}
		}
		SUBTYPE:NEEDS[CommunityResourcePack,!ClassicStock]
		{
			name = CMLOX
			tankType = RR_CryoCMLOX
			title = Carbon Monoxide + Oxidizer
			addedMass = #$/lossMass$
			addedCost = #$/lossCost$
			primaryColor = PurpleGrey
			secondaryColor = ResourceColorOxidizer
			descriptionDetail = #<b>Max Thrust:</b> $/thrustLCO$ kN <br><b>Isp:</b> <color="yellow">$/IspASLLCO$</color> / <color="yellow">$/IspVacLCO$</color>s <br><b>Max Temp:</b> <color="yellow">$/cryoMaxTemp$</color> / $/maxTemp$K
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleEnginesFX
				}
				DATA
				{
					maxThrust = #$/thrustLCO$
					PROPELLANT
					{
						name = LqdCO
						ratio = 11
					}
					PROPELLANT
					{
						name = Oxidizer
						ratio = 1
					}
					atmosphereCurve
					{
						key = #0 $/IspVacLCO$
						key = #1 $/IspASLLCO$
						key = #$/MODULE[ModuleEnginesFX]/atmosphereCurve/key,2$
					}
				}
			}
		}
	}
}